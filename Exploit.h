#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include "Functions.h"
#include "memory.h"
#include "aLua.h"
#include "detours.h"
#include <Windows.h>
#include <iostream>
#include <vector>
#include <iterator>
#include <sstream>
#include "replaceallfunction.h"

#pragma comment(lib, "detours.lib")
#pragma comment(lib, "wininet.lib")

CLua lua;


auto Returncheck1()
{
	int rccheck_function = rbxaddy(0x5046B0); // ReturnCheck Adresi
	int flag1 = rbxaddy(0x14773B0); // 1. flag adresi
	int flag2 = rbxaddy(0x15982EC); // 2. flag adresi

	int flag1_val = *(int*)(flag1);
	int flag2_val = *(int*)(flag2); 


	DWORD nOldProtect;
	BYTE OldJump = *(BYTE*)(rccheck_function);
	VirtualProtect((LPVOID)(rccheck_function), 1, PAGE_EXECUTE_READWRITE, &nOldProtect);

	
	*(BYTE*)(rccheck_function) = 0xC3;

	return [&]() {
		// Unhook fonksiyonu. ReturnCheck flaglarýný orjinal value'lerine geri döndürüyoruz.
		*(int*)flag1 = flag1_val;
		*(int*)flag2 = flag2_val;
		*(BYTE*)(rccheck_function) = OldJump;
		VirtualProtect((PVOID)(rccheck_function), 1, nOldProtect, &nOldProtect);
	};
}


using namespace std;

#define ScriptContextVftableAddr rbxaddy(0x118DAAC) // script context.
#define GlobalStates rbxaddy(0x4E1370)

typedef int(__thiscall * opens)(int selflol);
opens GlobalStates_Open = (opens)GlobalStates;

std::string Input() {
	std::string wotthefuck;
	getline(std::cin, wotthefuck);
	return wotthefuck;
}


std::vector<std::string> split(std::string s) {
	std::vector<std::string> elems;
	std::stringstream ss(s);
	std::istream_iterator<std::string> begin(ss);
	std::istream_iterator<std::string> end;
	std::vector<std::string> vstrings(begin, end);
	return vstrings;
}

void Console(char* title) {
	AllocConsole();
	SetConsoleTitleA(title);
	freopen("CONOUT$", "w", stdout);
	freopen("CONIN$", "r", stdin);

}



int ScriptContextVftable;


void ConsoleHacks()
{
	DWORD nothing;
	VirtualProtect((PVOID)&FreeConsole, 1, PAGE_EXECUTE_READWRITE, &nothing); //Roblox'un "freeconsole" adlý korumasý .d
	*(BYTE*)(&FreeConsole) = 0xC3;
}



namespace Roblox {
	int lua_State;
	std::string* PlayerName;
	int PlayerID;
	int LocalPlayer;
	int LocalCharacter;
	int DataModel;
	int Players;
	int Lighting;
	int Workspace;
	int ScriptContext;

	std::string* GetName(int Instance) {
		return (std::string*)(*(int*)(Instance + 0x28) - 0x4);
	}

	const char* GetClass(int self)
	{
		return (const char*)(*(int(**)(void))(*(int*)self + 16));
	}

	int FindFirstChild_PartOf(int Instance, std::string Name) {
		DWORD StartOfChildren = *(DWORD*)(Instance + 0x2C);
		DWORD EndOfChildren = *(DWORD*)(StartOfChildren + 4);
		for (int i = *(int*)StartOfChildren; i != EndOfChildren; i += 8)
		{
			if (strstr(GetName(*(int*)i)->c_str(), Name.c_str()))
			{
				if (*(int*)i != 0)
				{
					return *(int*)i;
				}
			}

		}
		return 0;
	}

	vector<DWORD> GetChildren(int instance) {
		try {
			vector<DWORD> rtn;
			DWORD num4 = *(DWORD *)(*(DWORD *)(instance + 0x2C));
			DWORD num3 = *(DWORD *)(*(DWORD *)(instance + 0x2C) + 4);
			while (num4 != num3) {
				rtn.push_back(*(DWORD*)num4);
				num4 += 8;
			}
			return rtn;
		}
		catch (exception)
		{
			printf("ERROR!\n");
		}
		vector<DWORD> rtnn;
		return rtnn;
	}


	int GetCharacter(std::string Name) {
		try {

			int Character = FindFirstChild_PartOf(Roblox::Workspace, Name);
			if (Character != 0) {
				return Character;
			}
			else
			{
				return 0;
			}
		}
		catch (exception) {
			printf("Error finding character!\n");
			Sleep(1);
		}
		return 0;
	}

	int GetLocalPlayer(int Plr) {
		try {
			return *(int*)(Plr + 340);
		}
		catch (exception) {
			printf("Error!\n");
			Sleep(1);
		}
	}

	vector <DWORD> GetCharacterVector(std::string Name) {
		try {
			if (Name == "others") {
				vector <DWORD> players = GetChildren(Players);
				if (players.size() != 0) {
					string *playername = GetName(GetLocalPlayer(Players));
					for (unsigned i = 0; i < players.size(); ++i) {
						string CPLAYER = *GetName(players[i]);
						if (CPLAYER == *playername) {
							players.erase(players.begin() + i);
						}
					}
					return players;
				}
				else
				{
					vector <DWORD> Players;
					return Players;
				}
			}
			else if (Name == "all") {
				vector <DWORD> players = GetChildren(Players);
				if (players.size() != 0) {
					return players;
				}
				else
				{
					vector <DWORD> Players;
					return players;
				}
			}
		}
		catch (exception) {
			printf("Error!\n");
			Sleep(1);
		}
	}

	bool GetFilteringEnabled() {
		if (*(BYTE*)(Workspace + 603) == 0) {
			return false;
		}
		return true;
	}

	int GetPlayer(std::string p) {
		if (p == "me") {
			int Player = GetLocalPlayer(Players);
			return Player;
		}
		if (p != "me") {
			int Player = FindFirstChild_PartOf(Players, p);
			if (Player != 0) {
				return Player;
			}
			if (Player == 0) {
				return{};
			}
		}
	}
}

std::string DownloadURL(const char* URL) {
	HINTERNET interwebs = InternetOpenA("Mozilla/5.0", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, NULL);
	HINTERNET urlFile;
	std::string rtn;
	if (interwebs) {
		urlFile = InternetOpenUrlA(interwebs, URL, NULL, NULL, NULL, NULL);
		if (urlFile) {
			char buffer[2000];
			DWORD bytesRead;
			do {
				InternetReadFile(urlFile, buffer, 2000, &bytesRead);
				rtn.append(buffer, bytesRead);
				memset(buffer, 0, 2000);
			} while (bytesRead);
			InternetCloseHandle(interwebs);
			InternetCloseHandle(urlFile);
			std::string p = replaceAll(rtn, "|n", "\r\n");
			return p;
		}
	}
	InternetCloseHandle(interwebs);
	std::string p = replaceAll(rtn, "|n", "\r\n");
	return p;
}


void whitelist() {
	//Eski whitelist yenisini bulamadým.
	std::string hwid;
	HW_PROFILE_INFO hwProfileInfo;
	if (GetCurrentHwProfile(&hwProfileInfo) != NULL) {
		hwid = hwProfileInfo.szHwProfileGuid;
	}

	typedef unsigned long DWORD;

	CHAR szVolumeNameBuffer[12]; //drive ismi
	DWORD dwVolumeSerialNumber; //drive seri numarasý
	DWORD dwMaximumComponentLength; 
	DWORD dwFileSystemFlags; 
	CHAR szFileSystemNameBuffer[10]; //dosya sisteminin yapýsý 

	GetVolumeInformationA("C:\\", szVolumeNameBuffer, 12, &dwVolumeSerialNumber, &dwMaximumComponentLength, &dwFileSystemFlags, szFileSystemNameBuffer, 10);
	
	std::string HDDserial = std::to_string(dwVolumeSerialNumber);

	string ver = "0.4";

	std::string url = "https://kaanozsoysal.000webhostapp.com/hwid.txt"; 

	std::string stuff = DownloadURL(url.c_str());
	if (stuff.find(HDDserial.c_str()) != string::npos) {
		Sleep(500);
		system("cls");
		printf("Welcome to Helios!\n");
		printf("Type cmds to view commands!\n");
	}
	else {
		
			printf("You are not whitelisted!\r\n");
			printf("Your secret key is: ");
			printf(HDDserial.c_str());
			printf("\n");
			Sleep(10000);
			exit(1);
	}
}

void Main() {
	//Bu main kýsým yani functionlarýn oyuna enjekte edildiði kýsým kolay kýsmý denilebilir.
	ConsoleHacks();
	Console("Helios | made by Craxy");
	system("Color C");
	printf("Scanning... ");
	ScriptContextVftable = ScriptContextVftableAddr;
	int ScriptContext = Memory::Scan(PAGE_READWRITE, (char*)&ScriptContextVftable, "xxxx");
	lua.State = GlobalStates_Open(ScriptContext);
	DWORD DataModelA = rbxaddy(0x1193AD4); 
	//Bunlar Oyunla alakalý bölüm Workspace, Lighting, Players nedir oyunu oynamadan anlayamazsýnýz.
	Roblox::DataModel = Memory::Scan(PAGE_READWRITE, (char*)&DataModelA, "xxxx"); //DataModel taramasý
	Roblox::Workspace = Roblox::FindFirstChild_PartOf(Roblox::DataModel, "Workspace"); //Workspace taramasý
	Roblox::Players = Roblox::FindFirstChild_PartOf(Roblox::DataModel, "Players"); //Player taramasý
	Roblox::Lighting = Roblox::FindFirstChild_PartOf(Roblox::DataModel, "Lighting"); //Lighting taramasý

	printf("OK!\r\n");
	printf("Initating... ");
	whitelist();


	do {
		//Bu da en basit kýsmý olan komut kýsmý burada LUA C kullanarak kendi komutlarýnýzý oluþturabilirsiniz.
		std::vector<std::string> x = split(Input());
		if (x.size() != 0) {
			if (x.at(0) == "ff") {
				if (x.at(1) == "me") {
					Forcefield(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Forcefield(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "char") {
				if (x.at(1) == "me") {
					auto rt_unhook = Returncheck1();
					string playr = "http://www.roblox.com/asset/CharacterFetch.ashx?userId=" + x.at(2);
					const char * b = playr.c_str();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "CharacterAppearance");
					rt_unhook();
					Kill(lua.State, "LocalPlayer");
				}

				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					auto rt_unhook = Returncheck1();
					string playr = "http://www.roblox.com/asset/CharacterFetch.ashx?userId=" + x.at(2);
					const char * b = playr.c_str();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "CharacterAppearance");
					rt_unhook();
					Kill(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "cmds") {
				cout <<
					"\n"
					"Player Commands :\n"
					"\n"
					"ff [p] - Gives [p] ForceField.\n"
					"unff [p] - Removes [p] ForceField.\n"
					"invisible [p] - Makes [p] Invisible.\n"
					"headless [p] - Makes [p]'s head invisible.\n"
					"sit [p] - Makes [p] sit.\n"
					"qsand [p] - Sinks [p] in ground.\n"
					"unqsand [p] - Renoves qsand effect from [p].\n"
					"noob [p] - Deletes [p]'s CharacterAppearance.\n"
					"ragdoll [p] - Sinks [p] in the ground.\n"
					"unragdoll [p] - Disables Ragdoll.\n"
					"fire [p] - Makes [p]'s head fire.\n"
					"unfire [p] - Removes fire from [p]'s head.\n"
					"bonfire [p] - Makes [p]'s body fire.\n"
					"god [p] - Makes [p]'s health infinite.\n"
					"ungod [p] - Sets [p]'s health 100.\n"
					"sparkles [p] - Makes [p]'s head sparky.\n"
					"unsparkles [p] - Removes sparkles of [p]'s head.\n"
					"smoke [p] - Makes [p]'s head smoky.\n"
					"tp [p1] [p2] - Teleports [p1] to [p2].\n"
					"kill [p] - Set [p]'s health to 0.\n"
					"ws [p] [n] - Sets [p]'s walkspeed to [n].\n"
					"jp [p] [n] - Sets [p]'s jumppower to [n].\n"
					"djump [p] - Disables jump of [p].\n"
					"stat [p] [stat] [n] - Change [p]'s [stat] to [n].\n"
					"char [p] [id] - Change [p]'s Appearance to [id].\n"
					"regular - Deletes Appearance effects of [p].\n"
					"freeze [p] - Freezes [p].\n"
					"thaw [p] - Unfreezes [p].\n"
					"particle [p] [id] - Makes particles by [id] on [p]'s head.\n"
					"face [p] [id] - Makes [p]'s face by [id].\n"
					"btools [p] - Gives build tools to [p].\n"
					"ball [p] - Makes [p]'s shape as ball.\n"
					"plane [p] - Makes [p]'s shape as plane.\n"
					"mesh [p] [id] - Makes [p]'s shape as [id].\n"

					
					"\n"
					"Server Commands :\n"
					"\n"
					"clrterrain - Clears Terrain.\n"
					"day - Sets time as 12:00.\n"
					"night - Sets time as 00:00.\n"
					"skybox [id] - Sets skybox to choosen [id].\n"
					"music [id] - Open's music with [id].\n"
					"stopmusic - Stops music.\n"
					"fog - Makes place foggy.\n"
					"unfog - Removes place's fog.\n"
					"time [n] - Sets place time to [n].\n"
					"warn [msg] - Warns server with [msg].\n"
					"print [msg] - Prints [msg] on console.\n"
					//"smsg [msg] - Send [msg] to Server.\n"

					;
			}
			else if (x.at(0) == "unff") {
				if (x.at(1) == "me") {
					RemoveFF(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					RemoveFF(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "warn") {
				const char* msg = x.at(1).c_str();
				Warn(lua.State, msg);
			}


			else if (x.at(0) == "regular") {
				if (x.at(1) == "me") {
					Regular(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Regular(lua.State, charname.c_str());
				}
			}
			//else if (x.at(0) == "smsg") {
			//	const char* m = x.at(1).c_str();
			//	Message(lua.State, m);
			//	RemoveMessage(lua.State);
			//}
			else if (x.at(0) == "kick") {
				if (x.at(1) == "me") {
					printf("Don't be silly :D\r\n");

				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					CrashPlayer(lua.State, charname.c_str());

				}
			}
			else if (x.at(0) == "noob") {
				if (x.at(1) == "me") {
					Noob(lua.State, "LocalPlayer");
					Kill(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Noob(lua.State, charname.c_str());
					Kill(lua.State, charname.c_str());
				}
			}

			else if (x.at(0) == "djump") {
				if (x.at(1) == "me") {
					JumpPower(lua.State, "LocalPlayer", 0);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					JumpPower(lua.State, charname.c_str(), 0);
				}
			}
			//else if (x.at(0) == "invisible") {
			//	if (x.at(1) == "me") {
			//		Invisible(lua.State, "LocalPlayer");
			//	}
			//	else {
			//		int Character = Roblox::GetCharacter(x.at(1));
			////	string charname = *Roblox::GetName(Character);
			//	Invisible(lua.State, charname.c_str());
			//}
			//}
			else if (x.at(0) == "qsand") {
				if (x.at(1) == "me") {
					QuickSand1(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					QuickSand1(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "print") {
				const char* speed = x.at(1).c_str();
				Print(lua.State, speed);
			}
			else if (x.at(0) == "unqsand") {
				if (x.at(1) == "me") {
					RagdollEnd(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					RagdollEnd(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "ragdoll") {
				if (x.at(1) == "me") {
					Ragdoll1(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Ragdoll1(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "unragdoll") {
				if (x.at(1) == "me") {
					RemoveRagdoll1(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					RemoveRagdoll1(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "fire") {
				if (x.at(1) == "me") {
					Fire(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Fire(lua.State, charname.c_str());
				}
			}

			else if (x.at(0) == "unfire") {
				if (x.at(1) == "me") {
					RemoveFire(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					RemoveFire(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "clrterrain") {
				ClearTerrain(lua.State);

			}
			else if (x.at(0) == "god") {
				if (x.at(1) == "me") {
					God(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					God(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "tp") {
				if (x.at(1) == "me") {
					printf("--> Invaild command <--\r\n");
				}
				else {
					int Character1 = Roblox::GetCharacter(x.at(1));
					string charname1 = *Roblox::GetName(Character1);
					int Character2 = Roblox::GetCharacter(x.at(2));
					string charname2 = *Roblox::GetName(Character2);
					TP(lua.State, charname1.c_str(), charname2.c_str());
				}
			}
			else if (x.at(0) == "kill") { 
				if (x.at(1) == "me") {
					Kill(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Kill(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "freeze") { 
				if (x.at(1) == "me") {
					Walkspeed(lua.State, "LocalPlayer", 0);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Walkspeed(lua.State, charname.c_str(), 0);
				}
			}
			else if (x.at(0) == "unfog") { 
				DestroyFog(lua.State);
			}
			else if (x.at(0) == "thaw") { 
				if (x.at(1) == "me") {
					Walkspeed(lua.State, "LocalPlayer", 16);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Walkspeed(lua.State, charname.c_str(), 16);
				}
			}
			else if (x.at(0) == "ws") { 
				if (x.at(1) == "me") {
					int speed = std::stof(x.at(2).c_str());
					Walkspeed(lua.State, "LocalPlayer", speed);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					int speed = std::stof(x.at(2).c_str());
					Walkspeed(lua.State, charname.c_str(), speed);
				}
			}
			else if (x.at(0) == "stat") {
				if (x.at(1) == "me") {
					int value = std::stof(x.at(3).c_str());
					const char* stat = (x.at(2).c_str());
					Stat(lua.State, "LocalPlayer", stat, value);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					int value = std::stof(x.at(3).c_str());
					const char* stat = (x.at(2).c_str());
					Stat(lua.State, charname.c_str(), stat, value);
				}
			}
			else if (x.at(0) == "sit") { 
				if (x.at(1) == "me") {
					Sit(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Sit(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "fog") { 
				Fog(lua.State);
			}
			//else if (x.at(0) == "music") {
			//	if (x.at(1) == id) {
			//	Music1(lua.State, *b);
			//}
			//}
			else if (x.at(0) == "sparkles") { 
				if (x.at(1) == "me") {
					Sparkles(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Sparkles(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "stopmusic") {
				StopMusic(lua.State);
			}
			else if (x.at(0) == "plane") { 

				if (x.at(1) == "me") {
					Mesh(lua.State, "LocalPlayer");
					string Sound = "http://www.roblox.com/asset/?id=471481268";
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}


				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					string Sound = "http://www.roblox.com/asset/?id=471481268";
					const char *b = Sound.c_str();
					Mesh(lua.State, charname.c_str());
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}
			}
			else if (x.at(0) == "ball") { 

				if (x.at(1) == "me") {
					Mesh(lua.State, "LocalPlayer");
					string Sound = "http://www.roblox.com/asset/?id=430219314";
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}


				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					string Sound = "http://www.roblox.com/asset/?id=430219314";
					const char *b = Sound.c_str();
					Mesh(lua.State, charname.c_str());
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}
			}

			else if (x.at(0) == "mesh") { 

				if (x.at(1) == "me") {
					Mesh(lua.State, "LocalPlayer");
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}


				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					Mesh(lua.State, charname.c_str());
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, "FileMesh");
					lua.setfield(lua.State, -2, "MeshType");

					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Torso");
					lua.getfield(lua.State, -1, "Mesh");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "MeshId");
					rt_unhook();
				}
			}
			else if (x.at(0) == "particle") { 

				if (x.at(1) == "me") {
					Particle(lua.State, "LocalPlayer");
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Head");
					lua.getfield(lua.State, -1, "ParticleEmitter");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "Texture");
					rt_unhook();
				}


				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Particle(lua.State, charname.c_str());
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Head");
					lua.getfield(lua.State, -1, "ParticleEmitter");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "Texture");
					rt_unhook();
				}
			}

			else if (x.at(0) == "face") {

				if (x.at(1) == "me") {
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, "LocalPlayer");

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Head");
					lua.getfield(lua.State, -1, "face");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "Texture");
					rt_unhook();
				}


				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					string Sound = "http://www.roblox.com/asset/?id=" + x.at(2);
					const char *b = Sound.c_str();
					auto rt_unhook = Returncheck1();
					lua.getglobal(lua.State, "game");
					lua.getfield(lua.State, -1, "Players");
					lua.getfield(lua.State, -1, charname.c_str());

					lua.getfield(lua.State, -1, "Character");
					lua.getfield(lua.State, -1, "Head");
					lua.getfield(lua.State, -1, "face");
					lua.pushstring(lua.State, b);
					lua.setfield(lua.State, -2, "Texture");
					rt_unhook();
				}
			}
			else if (x.at(0) == "skybox") { 
				Skybox(lua.State);
				auto rt_unhook = Returncheck1();
				string Sound = "http://www.roblox.com/asset/?id=" + x.at(1);
				const char *b = Sound.c_str();
				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxBk");

				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxDn");

				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxFt");

				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxLf");

				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxRt");

				lua.getglobal(lua.State, "game");
				lua.getfield(lua.State, -1, "Lighting");
				lua.getfield(lua.State, -1, "Sky");
				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SkyboxUp");
				rt_unhook();

			}
			else if (x.at(0) == "rskybox") { 
				Skybox(lua.State);
			}
			else if (x.at(0) == "music") {
				string Sound = "rbxassetid://" + x.at(1);
				const char *b = Sound.c_str();
				auto rt_unhook = Returncheck1();
				int soundVolume = 1;
				int soundPitch = 1;

				lua.getglobal(lua.State, "Instance");

				lua.getglobal(lua.State, "game");

				lua.getfield(lua.State, -1, "GetService");
				lua.pushvalue(lua.State, -2);
				lua.pushstring(lua.State, "Workspace");
				lua.pcall(lua.State, 2, 1, 0);
				

				lua.getfield(lua.State, -1, "FindFirstChild");
				lua.pushvalue(lua.State, -2);
				lua.pushstring(lua.State, "MHolder");
				lua.pcall(lua.State, 2, 1, 0);

				
				lua.pop(lua.State, 1);

				lua.getfield(lua.State, -3, "new");
				lua.pushstring(lua.State, "Model");
				lua.pushvalue(lua.State, -3);
				lua.pcall(lua.State, 2, 1, 0);

				lua.pushstring(lua.State, "MHolder");
				lua.setfield(lua.State, -2, "Name");

				//

				//
				lua.getfield(lua.State, -4, "new");
				lua.pushstring(lua.State, "Sound");
				lua.pushvalue(lua.State, -3);
				lua.pcall(lua.State, 2, 1, 0);

				lua.pushnumber(lua.State, soundVolume);
				lua.setfield(lua.State, -2, "Volume");

				lua.pushnumber(lua.State, soundPitch);
				lua.setfield(lua.State, -2, "Pitch");

				lua.pushstring(lua.State, b);
				lua.setfield(lua.State, -2, "SoundId");

				lua.getfield(lua.State, -1, "Play");
				lua.pushvalue(lua.State, -2);
				lua.pcall(lua.State, 1, 0, 0);

				rt_unhook();

			}


			else if (x.at(0) == "unsparkles") { 
				if (x.at(1) == "me") {
					RemoveSparkles(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					RemoveSparkles(lua.State, charname.c_str());
				}
			}

			else if (x.at(0) == "btools") { 
				if (x.at(1) == "me") {
					Btools(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Btools(lua.State, charname.c_str());
				}
			}
			//else if (x.at(0) == "loopkill") { 
			//	if (x.at(1) == "me") {
			//		Loopkill(lua.State, "LocalPlayer");
			//	}
			//	else {
			//		int Character = Roblox::GetCharacter(x.at(1));
			//		string charname = *Roblox::GetName(Character);
			//		Loopkill(lua.State, charname.c_str());
			//	}
			//}
			else if (x.at(0) == "bonfire") { 
				if (x.at(1) == "me") {
					Bonfire(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Bonfire(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "smoke") { 
				if (x.at(1) == "me") {
					Smoke(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Smoke(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "headless") { 
				if (x.at(1) == "me") {
					NoHead(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					NoHead(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "invisible") { 
				if (x.at(1) == "me") {
					NoHead(lua.State, "LocalPlayer");
					NoLarm(lua.State, "LocalPlayer");
					NoRarm(lua.State, "LocalPlayer");
					NoLleg(lua.State, "LocalPlayer");
					NoRleg(lua.State, "LocalPlayer");
					NoTorso(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					NoHead(lua.State, charname.c_str());
					NoLarm(lua.State, charname.c_str());
					NoRarm(lua.State, charname.c_str());
					NoLleg(lua.State, charname.c_str());
					NoRleg(lua.State, charname.c_str());
					NoTorso(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "fling") { 
				if (x.at(1) == "me") {
					Fling(lua.State, "LocalPlayer");
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					Fling(lua.State, charname.c_str());
				}
			}
			else if (x.at(0) == "jp") { 
				if (x.at(1) == "me") {
					int jump = std::stof(x.at(2).c_str());
					JumpPower(lua.State, "LocalPlayer", jump);
				}
				else {
					int Character = Roblox::GetCharacter(x.at(1));
					string charname = *Roblox::GetName(Character);
					int jump = std::stof(x.at(2).c_str());
					JumpPower(lua.State, charname.c_str(), jump);
				}
			}
			else if (x.at(0) == "day") { // for ex: "sparkles/sp/spar"
				TimeSet(lua.State, 12);
			}
		
		else if (x.at(0) == "night") { // for ex: "sparkles/sp/spar"
			TimeSet(lua.State, 0);
		}
	
			else if (x.at(0) == "time") { // for ex: "sparkles/sp/spar"
				int time = std::stof(x.at(1).c_str());
				TimeSet(lua.State, time);
			}
}
		else {
			printf("--> Invaild command <--\r\n");
		}
	} while (true);
}